// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: center.proto

package center

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CenterService_CreateCenter_FullMethodName  = "/center.CenterService/CreateCenter"
	CenterService_GetCenterById_FullMethodName = "/center.CenterService/GetCenterById"
	CenterService_UpdateCenter_FullMethodName  = "/center.CenterService/UpdateCenter"
	CenterService_DeleteCenter_FullMethodName  = "/center.CenterService/DeleteCenter"
)

// CenterServiceClient is the client API for CenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CenterServiceClient interface {
	CreateCenter(ctx context.Context, in *Center, opts ...grpc.CallOption) (*CenterResp, error)
	GetCenterById(ctx context.Context, in *CenterId, opts ...grpc.CallOption) (*CenterResp, error)
	UpdateCenter(ctx context.Context, in *CenterResp, opts ...grpc.CallOption) (*UpdateResp, error)
	DeleteCenter(ctx context.Context, in *CenterId, opts ...grpc.CallOption) (*Status, error)
}

type centerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterServiceClient(cc grpc.ClientConnInterface) CenterServiceClient {
	return &centerServiceClient{cc}
}

func (c *centerServiceClient) CreateCenter(ctx context.Context, in *Center, opts ...grpc.CallOption) (*CenterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CenterResp)
	err := c.cc.Invoke(ctx, CenterService_CreateCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerServiceClient) GetCenterById(ctx context.Context, in *CenterId, opts ...grpc.CallOption) (*CenterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CenterResp)
	err := c.cc.Invoke(ctx, CenterService_GetCenterById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerServiceClient) UpdateCenter(ctx context.Context, in *CenterResp, opts ...grpc.CallOption) (*UpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, CenterService_UpdateCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerServiceClient) DeleteCenter(ctx context.Context, in *CenterId, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, CenterService_DeleteCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterServiceServer is the server API for CenterService service.
// All implementations must embed UnimplementedCenterServiceServer
// for forward compatibility
type CenterServiceServer interface {
	CreateCenter(context.Context, *Center) (*CenterResp, error)
	GetCenterById(context.Context, *CenterId) (*CenterResp, error)
	UpdateCenter(context.Context, *CenterResp) (*UpdateResp, error)
	DeleteCenter(context.Context, *CenterId) (*Status, error)
	mustEmbedUnimplementedCenterServiceServer()
}

// UnimplementedCenterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCenterServiceServer struct {
}

func (UnimplementedCenterServiceServer) CreateCenter(context.Context, *Center) (*CenterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCenter not implemented")
}
func (UnimplementedCenterServiceServer) GetCenterById(context.Context, *CenterId) (*CenterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCenterById not implemented")
}
func (UnimplementedCenterServiceServer) UpdateCenter(context.Context, *CenterResp) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCenter not implemented")
}
func (UnimplementedCenterServiceServer) DeleteCenter(context.Context, *CenterId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCenter not implemented")
}
func (UnimplementedCenterServiceServer) mustEmbedUnimplementedCenterServiceServer() {}

// UnsafeCenterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CenterServiceServer will
// result in compilation errors.
type UnsafeCenterServiceServer interface {
	mustEmbedUnimplementedCenterServiceServer()
}

func RegisterCenterServiceServer(s grpc.ServiceRegistrar, srv CenterServiceServer) {
	s.RegisterService(&CenterService_ServiceDesc, srv)
}

func _CenterService_CreateCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Center)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServiceServer).CreateCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CenterService_CreateCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServiceServer).CreateCenter(ctx, req.(*Center))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterService_GetCenterById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CenterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServiceServer).GetCenterById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CenterService_GetCenterById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServiceServer).GetCenterById(ctx, req.(*CenterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterService_UpdateCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CenterResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServiceServer).UpdateCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CenterService_UpdateCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServiceServer).UpdateCenter(ctx, req.(*CenterResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterService_DeleteCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CenterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServiceServer).DeleteCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CenterService_DeleteCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServiceServer).DeleteCenter(ctx, req.(*CenterId))
	}
	return interceptor(ctx, in, info, handler)
}

// CenterService_ServiceDesc is the grpc.ServiceDesc for CenterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CenterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "center.CenterService",
	HandlerType: (*CenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCenter",
			Handler:    _CenterService_CreateCenter_Handler,
		},
		{
			MethodName: "GetCenterById",
			Handler:    _CenterService_GetCenterById_Handler,
		},
		{
			MethodName: "UpdateCenter",
			Handler:    _CenterService_UpdateCenter_Handler,
		},
		{
			MethodName: "DeleteCenter",
			Handler:    _CenterService_DeleteCenter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "center.proto",
}
